//To count the number of strongly connected components...
void dfs(int node , vector<vector<int>>&adj , vector<int>&vis , stack<int>& st)
	{
	    vis[node]=1;
	    for(auto it:adj[node])
	    {
	        if(!vis[it])
	        dfs(it,adj,vis,st);
	    }
	    st.push(node);
	}
	void dfsK(int node , vector<int>adjT[] , vector<int>&vis)
	{
	    vis[node]=1;
	    for(auto it:adjT[node])
	    {
	        if(!vis[it])
	        dfsK(it,adjT,vis);
	    }
	}
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
        stack<int>st;
        vector<int>vis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i])
            {
                dfs(i,adj,vis,st);
            }
        }
        vector<int>adjT[V+1];
        for(int i=0;i<V;i++)
        {
            vis[i]=0;
            for(auto it:adj[i])
            {
                adjT[it].push_back(i);
            }
        }
        int ans=0;
        while(!st.empty())
        {
            int node=st.top();
            st.pop();
            if(!vis[node])
            {
                dfsK(node,adjT,vis);
                ans++;
            }
        }
        return ans;
        
    }
