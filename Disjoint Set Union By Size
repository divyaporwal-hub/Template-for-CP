class DisjointSet {

public:
    vector<int> rank, par, size;
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        par.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            par[i] = i;
            size[i] = 1;
        }
    }

    int findPar(int node) {
        if (node == par[node])
            return node;
        return par[node] = findPar(par[node]);
    }

    void unionByRank(int u, int v) {
        int par_u = findPar(u);
        int par_v = findPar(v);
        if (par_u == par_v) return;
        if (rank[par_u] < rank[par_v]) {
            par[par_u] = par_v;
        }
        else if (rank[par_v] < rank[par_u]) {
            par[par_v] = par_u;
        }
        else {
            par[par_v] = par_u;
            rank[par_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int par_u = findPar(u);
        int par_v = findPar(v);
        if (par_u == par_v) return;
        if (size[par_u] < size[par_v]) {
            par[par_u] = par_v;
            size[par_v] += size[par_u];
        }
        else {
            par[par_v] = par_u;
            size[par_u] += size[par_v];
        }
    }
};
